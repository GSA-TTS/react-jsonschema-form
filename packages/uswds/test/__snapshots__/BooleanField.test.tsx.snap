// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`single fields checkbox field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      checked={false}
      data-mock-props="{"id":"root","name":"root","checked":false,"disabled":false,"label":""}"
      data-testid="mock-Checkbox"
      disabled={false}
      id="root"
      label=""
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields checkbox field with label 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      test
    </div>
    <div
      className="usa-hint"
    />
    <div
      checked={false}
      data-mock-props="{"id":"root","name":"root","checked":false,"disabled":false,"label":"test"}"
      data-testid="mock-Checkbox"
      disabled={false}
      id="root"
      label="test"
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields checkboxes field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      An enum list rendered as checkboxes
    </div>
    <div
      className="usa-hint"
    />
    <div
      className="checkboxes"
      id="root"
    >
      <div
        className="checkbox "
      >
        <label>
          <span>
            <input
              aria-describedby="root__error root__description root__help"
              autoFocus={false}
              checked={false}
              disabled={false}
              id="root-0"
              name="root"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
              value="0"
            />
            <span>
              foo
            </span>
          </span>
        </label>
      </div>
      <div
        className="checkbox "
      >
        <label>
          <span>
            <input
              aria-describedby="root__error root__description root__help"
              autoFocus={false}
              checked={false}
              disabled={false}
              id="root-1"
              name="root"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
              value="1"
            />
            <span>
              bar
            </span>
          </span>
        </label>
      </div>
      <div
        className="checkbox "
      >
        <label>
          <span>
            <input
              aria-describedby="root__error root__description root__help"
              autoFocus={false}
              checked={false}
              disabled={false}
              id="root-2"
              name="root"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
              value="2"
            />
            <span>
              fuzz
            </span>
          </span>
        </label>
      </div>
      <div
        className="checkbox "
      >
        <label>
          <span>
            <input
              aria-describedby="root__error root__description root__help"
              autoFocus={false}
              checked={false}
              disabled={false}
              id="root-3"
              name="root"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
              value="3"
            />
            <span>
              qux
            </span>
          </span>
        </label>
      </div>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields field with description 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-form-group"
      data-mock-props="{"className":"usa-form-group"}"
      data-testid="mock-GridContainer"
    >
      <div
        data-mock-props="{"row":true,"gap":2}"
        data-testid="mock-Grid"
        gap={2}
        row={true}
      >
        <div
          col={12}
          data-mock-props="{"col":12}"
          data-testid="mock-Grid"
        >
          <div
            data-mock-props="{"error":false}"
            data-testid="mock-FormGroup"
            error={false}
          >
            <div
              data-mock-props="{"htmlFor":"root_my-field","error":false}"
              data-testid="mock-Label"
              error={false}
              htmlFor="root_my-field"
            >
              my-field
            </div>
            <div
              className="usa-hint"
            >
              <p
                className="field-description"
                id="root_my-field__description"
              >
                some description
              </p>
            </div>
            <div
              data-mock-props="{"error":false}"
              data-testid="mock-FormGroup"
              error={false}
            >
              <div
                data-mock-props="{"htmlFor":"root_my-field","error":false}"
                data-testid="mock-Label"
                error={false}
                htmlFor="root_my-field"
              >
                my-field
              </div>
              <div
                aria-describedby="root_my-field__error root_my-field__description root_my-field__help"
                className=""
                data-mock-props="{"id":"root_my-field","name":"root_my-field","className":"","type":"text","value":"","aria-describedby":"root_my-field__error root_my-field__description root_my-field__help"}"
                data-testid="mock-TextInput"
                id="root_my-field"
                name="root_my-field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                value=""
              />
            </div>
            <div
              className="usa-hint"
            />
          </div>
        </div>
      </div>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields field with description in uiSchema 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-form-group"
      data-mock-props="{"className":"usa-form-group"}"
      data-testid="mock-GridContainer"
    >
      <div
        data-mock-props="{"row":true,"gap":2}"
        data-testid="mock-Grid"
        gap={2}
        row={true}
      >
        <div
          col={12}
          data-mock-props="{"col":12}"
          data-testid="mock-Grid"
        >
          <div
            data-mock-props="{"error":false}"
            data-testid="mock-FormGroup"
            error={false}
          >
            <div
              data-mock-props="{"htmlFor":"root_my-field","error":false}"
              data-testid="mock-Label"
              error={false}
              htmlFor="root_my-field"
            >
              my-field
            </div>
            <div
              className="usa-hint"
            >
              <p
                className="field-description"
                id="root_my-field__description"
              >
                some other description
              </p>
            </div>
            <div
              data-mock-props="{"error":false}"
              data-testid="mock-FormGroup"
              error={false}
            >
              <div
                data-mock-props="{"htmlFor":"root_my-field","error":false}"
                data-testid="mock-Label"
                error={false}
                htmlFor="root_my-field"
              >
                my-field
              </div>
              <div
                aria-describedby="root_my-field__error root_my-field__description root_my-field__help"
                className=""
                data-mock-props="{"id":"root_my-field","name":"root_my-field","className":"","type":"text","value":"","aria-describedby":"root_my-field__error root_my-field__description root_my-field__help"}"
                data-testid="mock-TextInput"
                id="root_my-field"
                name="root_my-field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                value=""
              />
            </div>
            <div
              className="usa-hint"
            />
          </div>
        </div>
      </div>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields format color 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <input
      aria-describedby="root__error root__description root__help"
      autoFocus={false}
      className="form-control"
      disabled={false}
      id="root"
      label=""
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      placeholder=""
      readOnly={false}
      type="color"
      value=""
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields format date 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <input
      aria-describedby="root__error root__description root__help"
      autoFocus={false}
      className="form-control"
      disabled={false}
      id="root"
      label=""
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      placeholder=""
      readOnly={false}
      type="date"
      value=""
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields format datetime 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <input
      aria-describedby="root__error root__description root__help"
      autoFocus={false}
      className="form-control"
      disabled={false}
      id="root"
      label=""
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      placeholder=""
      readOnly={false}
      type="datetime-local"
      value=""
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields format time 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <input
      aria-describedby="root__error root__description root__help"
      autoFocus={false}
      className="form-control"
      disabled={false}
      id="root"
      label=""
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      placeholder=""
      readOnly={false}
      type="time"
      value=""
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields help and error display 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    className="panel panel-danger errors"
  >
    <div
      className="panel-heading"
    >
      <h3
        className="panel-title"
      >
        Errors
      </h3>
    </div>
    <ul
      className="list-group"
    >
      <li
        className="list-group-item text-danger"
      >
        . an error
      </li>
    </ul>
  </div>
  <div
    data-mock-props="{"error":true}"
    data-testid="mock-FormGroup"
    error={true}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"error":true}"
      data-testid="mock-FormGroup"
      error={true}
    >
      <div
        data-mock-props="{"htmlFor":"root","error":true}"
        data-testid="mock-Label"
        error={true}
        htmlFor="root"
      />
      <div
        aria-describedby="root__error root__description root__help"
        className="usa-input--error"
        data-mock-props="{"id":"root","name":"root","className":"usa-input--error","type":"text","value":"","aria-describedby":"root__error root__description root__help"}"
        data-testid="mock-TextInput"
        id="root"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
    </div>
    <div>
      <ul
        className="error-detail bs-callout bs-callout-info"
        id="root__error"
      >
        <li
          className="text-danger"
        >
          an error
        </li>
      </ul>
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="help-block"
        id="root__help"
      >
        help me!
      </p>
    </div>
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields hidden field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-form-group"
      data-mock-props="{"className":"usa-form-group"}"
      data-testid="mock-GridContainer"
    >
      <div
        data-mock-props="{"row":true,"gap":2}"
        data-testid="mock-Grid"
        gap={2}
        row={true}
      >
        <div
          col={12}
          data-mock-props="{"col":12}"
          data-testid="mock-Grid"
        >
          <input
            id="root_my-field"
            name="root_my-field"
            type="hidden"
            value=""
          />
        </div>
      </div>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields hidden label 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"error":false}"
      data-testid="mock-FormGroup"
      error={false}
    >
      <div
        aria-describedby="root__error root__description root__help"
        className=""
        data-mock-props="{"id":"root","name":"root","className":"","type":"text","value":"","aria-describedby":"root__error root__description root__help"}"
        data-testid="mock-TextInput"
        id="root"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields null field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields number field 0 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"error":false}"
      data-testid="mock-FormGroup"
      error={false}
    >
      <div
        data-mock-props="{"htmlFor":"root","error":false}"
        data-testid="mock-Label"
        error={false}
        htmlFor="root"
      />
      <div
        aria-describedby="root__error root__description root__help"
        className=""
        data-mock-props="{"id":"root","name":"root","className":"","type":"number","step":"any","value":0,"aria-describedby":"root__error root__description root__help"}"
        data-testid="mock-TextInput"
        id="root"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        step="any"
        type="number"
        value={0}
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields number field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"error":false}"
      data-testid="mock-FormGroup"
      error={false}
    >
      <div
        data-mock-props="{"htmlFor":"root","error":false}"
        data-testid="mock-Label"
        error={false}
        htmlFor="root"
      />
      <div
        aria-describedby="root__error root__description root__help"
        className=""
        data-mock-props="{"id":"root","name":"root","className":"","type":"number","step":"any","value":"","aria-describedby":"root__error root__description root__help"}"
        data-testid="mock-TextInput"
        id="root"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        step="any"
        type="number"
        value=""
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields password field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <input
      aria-describedby="root__error root__description root__help"
      autoFocus={false}
      className="form-control"
      disabled={false}
      id="root"
      label=""
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      placeholder=""
      readOnly={false}
      type="password"
      value=""
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields radio field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-radio-group"
    >
      <div
        checked={false}
        data-mock-props="{"id":"root_0","name":"root","value":true,"checked":false,"label":"Yes"}"
        data-testid="mock-Radio"
        id="root_0"
        label="Yes"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        value={true}
      />
      <div
        checked={false}
        data-mock-props="{"id":"root_1","name":"root","value":false,"checked":false,"label":"No"}"
        data-testid="mock-Radio"
        id="root_1"
        label="No"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        value={false}
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields schema examples 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"error":false}"
      data-testid="mock-FormGroup"
      error={false}
    >
      <div
        data-mock-props="{"htmlFor":"root","error":false}"
        data-testid="mock-Label"
        error={false}
        htmlFor="root"
      />
      <div
        aria-describedby="root__error root__description root__help root__examples"
        className=""
        data-mock-props="{"id":"root","name":"root","className":"","list":"root__examples","type":"text","value":"","aria-describedby":"root__error root__description root__help root__examples"}"
        data-testid="mock-TextInput"
        id="root"
        list="root__examples"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <datalist
        id="root__examples"
      >
        <option
          value="Firefox"
        />
        <option
          value="Chrome"
        />
        <option
          value="Opera"
        />
        <option
          value="Vivaldi"
        />
        <option
          value="Safari"
        />
      </datalist>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"id":"root","name":"root","disabled":false}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
    >
      <option
        value="foo"
      >
        foo
      </option>
      <option
        value="bar"
      >
        bar
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field multiple choice 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"id":"root","name":"root","value":[],"required":false,"disabled":false,"multiple":true}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      multiple={true}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      value={[]}
    >
      <option
        value="foo"
      >
        foo
      </option>
      <option
        value="bar"
      >
        bar
      </option>
      <option
        value="fuzz"
      >
        fuzz
      </option>
      <option
        value="qux"
      >
        qux
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field multiple choice enumDisabled 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"id":"root","name":"root","value":[],"required":false,"disabled":false,"multiple":true}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      multiple={true}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      value={[]}
    >
      <option
        disabled={false}
        value="foo"
      >
        foo
      </option>
      <option
        disabled={true}
        value="bar"
      >
        bar
      </option>
      <option
        disabled={false}
        value="fuzz"
      >
        fuzz
      </option>
      <option
        disabled={false}
        value="qux"
      >
        qux
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field multiple choice enumDisabled using checkboxes 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="checkboxes"
      id="root"
    >
      <div
        className="checkbox "
      >
        <label>
          <span>
            <input
              aria-describedby="root__error root__description root__help"
              autoFocus={false}
              checked={false}
              disabled={false}
              id="root-0"
              name="root"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
              value="0"
            />
            <span>
              foo
            </span>
          </span>
        </label>
      </div>
      <div
        className="checkbox disabled"
      >
        <label>
          <span>
            <input
              aria-describedby="root__error root__description root__help"
              autoFocus={false}
              checked={false}
              disabled={true}
              id="root-1"
              name="root"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
              value="1"
            />
            <span>
              bar
            </span>
          </span>
        </label>
      </div>
      <div
        className="checkbox "
      >
        <label>
          <span>
            <input
              aria-describedby="root__error root__description root__help"
              autoFocus={false}
              checked={false}
              disabled={false}
              id="root-2"
              name="root"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
              value="2"
            />
            <span>
              fuzz
            </span>
          </span>
        </label>
      </div>
      <div
        className="checkbox "
      >
        <label>
          <span>
            <input
              aria-describedby="root__error root__description root__help"
              autoFocus={false}
              checked={false}
              disabled={false}
              id="root-3"
              name="root"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
              value="3"
            />
            <span>
              qux
            </span>
          </span>
        </label>
      </div>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field multiple choice formData 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"id":"root","name":"root","value":["foo","bar"],"required":false,"disabled":false,"multiple":true}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      multiple={true}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      value={
        [
          "foo",
          "bar",
        ]
      }
    >
      <option
        value="foo"
      >
        foo
      </option>
      <option
        value="bar"
      >
        bar
      </option>
      <option
        value="fuzz"
      >
        fuzz
      </option>
      <option
        value="qux"
      >
        qux
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field multiple choice with labels 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"id":"root","name":"root","value":[],"required":false,"disabled":false,"multiple":true}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      multiple={true}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      value={[]}
    >
      <option
        value={1}
      >
        Blue
      </option>
      <option
        value={2}
      >
        Red
      </option>
      <option
        value={3}
      >
        Green
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field single choice enumDisabled 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"id":"root","name":"root","disabled":false}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
    >
      <option
        disabled={false}
        value="foo"
      >
        foo
      </option>
      <option
        disabled={true}
        value="bar"
      >
        bar
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field single choice enumDisabled using radio widget 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-radio-group"
    >
      <div
        checked={false}
        data-mock-props="{"id":"root_0","name":"root","value":"foo","checked":false,"disabled":false,"label":"foo"}"
        data-testid="mock-Radio"
        disabled={false}
        id="root_0"
        label="foo"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        value="foo"
      />
      <div
        checked={false}
        data-mock-props="{"id":"root_1","name":"root","value":"bar","checked":false,"disabled":true,"label":"bar"}"
        data-testid="mock-Radio"
        disabled={true}
        id="root_1"
        label="bar"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        value="bar"
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field single choice form disabled using radio widget 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-radio-group"
    >
      <div
        checked={false}
        data-mock-props="{"id":"root_0","name":"root","value":"foo","checked":false,"label":"foo"}"
        data-testid="mock-Radio"
        id="root_0"
        label="foo"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        value="foo"
      />
      <div
        checked={false}
        data-mock-props="{"id":"root_1","name":"root","value":"bar","checked":false,"label":"bar"}"
        data-testid="mock-Radio"
        id="root_1"
        label="bar"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        value="bar"
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={true}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field single choice formData 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"id":"root","name":"root","value":"bar","disabled":false}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      value="bar"
    >
      <option
        value="foo"
      >
        foo
      </option>
      <option
        value="bar"
      >
        bar
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields select field single choice uiSchema disabled using radio widget 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-radio-group"
    >
      <div
        checked={false}
        data-mock-props="{"id":"root_0","name":"root","value":"foo","checked":false,"label":"foo"}"
        data-testid="mock-Radio"
        id="root_0"
        label="foo"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        value="foo"
      />
      <div
        checked={false}
        data-mock-props="{"id":"root_1","name":"root","value":"bar","checked":false,"label":"bar"}"
        data-testid="mock-Radio"
        id="root_1"
        label="bar"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        value="bar"
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields slider field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <input
      className="usa-range"
      disabled={false}
      id="root"
      max={100}
      min={0}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      step={1}
      type="range"
      value={75}
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields string field format data-url 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div>
      <input
        aria-describedby="root__error root__description root__help"
        autoFocus={false}
        className="form-control"
        disabled={false}
        id="root"
        label=""
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        placeholder=""
        readOnly={false}
        type="file"
        value=""
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields string field format email 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <input
      aria-describedby="root__error root__description root__help"
      autoFocus={false}
      className="form-control"
      disabled={false}
      id="root"
      label=""
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      placeholder=""
      readOnly={false}
      type="email"
      value=""
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields string field format uri 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <input
      aria-describedby="root__error root__description root__help"
      autoFocus={false}
      className="form-control"
      disabled={false}
      id="root"
      label=""
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      placeholder=""
      readOnly={false}
      type="url"
      value=""
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields string field regular 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"error":false}"
      data-testid="mock-FormGroup"
      error={false}
    >
      <div
        data-mock-props="{"htmlFor":"root","error":false}"
        data-testid="mock-Label"
        error={false}
        htmlFor="root"
      />
      <div
        aria-describedby="root__error root__description root__help"
        className=""
        data-mock-props="{"id":"root","name":"root","className":"","type":"text","value":"","aria-describedby":"root__error root__description root__help"}"
        data-testid="mock-TextInput"
        id="root"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields string field with placeholder 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"error":false}"
      data-testid="mock-FormGroup"
      error={false}
    >
      <div
        data-mock-props="{"htmlFor":"root","error":false}"
        data-testid="mock-Label"
        error={false}
        htmlFor="root"
      />
      <div
        aria-describedby="root__error root__description root__help"
        className=""
        data-mock-props="{"id":"root","name":"root","className":"","type":"text","value":"","aria-describedby":"root__error root__description root__help"}"
        data-testid="mock-TextInput"
        id="root"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields textarea field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"id":"root","name":"root","value":"","disabled":false,"rows":5}"
      data-testid="mock-Textarea"
      disabled={false}
      id="root"
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      rows={5}
      value=""
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields title field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      Titre 1
    </div>
    <div
      className="usa-hint"
    />
    <div
      className="usa-form-group"
      data-mock-props="{"className":"usa-form-group"}"
      data-testid="mock-GridContainer"
    >
      <h3
        className="usa-label"
      >
        Titre 1
      </h3>
      <div
        data-mock-props="{"row":true,"gap":2}"
        data-testid="mock-Grid"
        gap={2}
        row={true}
      >
        <div
          col={12}
          data-mock-props="{"col":12}"
          data-testid="mock-Grid"
        >
          <div
            data-mock-props="{"error":false}"
            data-testid="mock-FormGroup"
            error={false}
          >
            <div
              data-mock-props="{"htmlFor":"root_title","error":false}"
              data-testid="mock-Label"
              error={false}
              htmlFor="root_title"
            >
              Titre 2
            </div>
            <div
              className="usa-hint"
            />
            <div
              data-mock-props="{"error":false}"
              data-testid="mock-FormGroup"
              error={false}
            >
              <div
                data-mock-props="{"htmlFor":"root_title","error":false}"
                data-testid="mock-Label"
                error={false}
                htmlFor="root_title"
              >
                Titre 2
              </div>
              <div
                aria-describedby="root_title__error root_title__description root_title__help"
                className=""
                data-mock-props="{"id":"root_title","name":"root_title","className":"","type":"text","value":"","aria-describedby":"root_title__error root_title__description root_title__help"}"
                data-testid="mock-TextInput"
                id="root_title"
                name="root_title"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                value=""
              />
            </div>
            <div
              className="usa-hint"
            />
          </div>
        </div>
      </div>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields unsupported field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="unsupported-field"
    >
      <p>
        <span>
          Unsupported field schema for field 
          <code>
            root
          </code>
          : 
          <em>
            Unknown field type undefined
          </em>
          .
        </span>
      </p>
      <pre>
        {}
      </pre>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields up/down field 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"type":"number","id":"root","name":"root","disabled":false,"value":"","min":null,"max":null,"step":null}"
      data-testid="mock-TextInput"
      disabled={false}
      id="root"
      max={NaN}
      min={NaN}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      step={NaN}
      type="number"
      value=""
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`single fields using custom tagName 1`] = `
<div
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"error":false}"
      data-testid="mock-FormGroup"
      error={false}
    >
      <div
        data-mock-props="{"htmlFor":"root","error":false}"
        data-testid="mock-Label"
        error={false}
        htmlFor="root"
      />
      <div
        aria-describedby="root__error root__description root__help"
        className=""
        data-mock-props="{"id":"root","name":"root","className":"","type":"text","value":"","aria-describedby":"root__error root__description root__help"}"
        data-testid="mock-TextInput"
        id="root"
        name="root"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</div>
`;
