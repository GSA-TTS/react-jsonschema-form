// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`array fields array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="field field-array field-array-of-string"
      data-mock-props="{"className":"field field-array field-array-of-string"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`array fields array icons 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="field field-array field-array-of-string"
      data-mock-props="{"className":"field field-array field-array-of-string"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`array fields checkboxes 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      data-mock-props="{"id":"root","name":"root","value":[],"required":false,"disabled":false,"multiple":true}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      multiple={true}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      value={[]}
    >
      <option
        value="a"
      >
        a
      </option>
      <option
        value="b"
      >
        b
      </option>
      <option
        value="c"
      >
        c
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`array fields empty errors array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-form-group"
      data-mock-props="{"className":"usa-form-group"}"
      data-testid="mock-GridContainer"
    >
      <div
        data-mock-props="{"row":true,"gap":2}"
        data-testid="mock-Grid"
        gap={2}
        row={true}
      >
        <div
          col={12}
          data-mock-props="{"col":12}"
          data-testid="mock-Grid"
        >
          <div
            data-mock-props="{"error":false}"
            data-testid="mock-FormGroup"
            error={false}
          >
            <div
              data-mock-props="{"htmlFor":"root_name","error":false}"
              data-testid="mock-Label"
              error={false}
              htmlFor="root_name"
            >
              name
            </div>
            <div
              className="usa-hint"
            />
            <div
              data-mock-props="{"error":false}"
              data-testid="mock-FormGroup"
              error={false}
            >
              <div
                data-mock-props="{"htmlFor":"root_name","error":false}"
                data-testid="mock-Label"
                error={false}
                htmlFor="root_name"
              >
                name
              </div>
              <div
                aria-describedby="root_name__error root_name__description root_name__help"
                className=""
                data-mock-props="{"id":"root_name","name":"root_name","className":"","type":"text","value":"","aria-describedby":"root_name__error root_name__description root_name__help"}"
                data-testid="mock-TextInput"
                id="root_name"
                name="root_name"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                value=""
              />
            </div>
            <div
              className="usa-hint"
            />
          </div>
        </div>
      </div>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`array fields fixed array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="field field-array field-array-fixed-items"
      data-mock-props="{"className":"field field-array field-array-fixed-items"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`array fields has errors 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    className="panel panel-danger errors"
  >
    <div
      className="panel-heading"
    >
      <h3
        className="panel-title"
      >
        Errors
      </h3>
    </div>
    <ul
      className="list-group"
    >
      <li
        className="list-group-item text-danger"
      >
        .name Bad input
      </li>
    </ul>
  </div>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-form-group"
      data-mock-props="{"className":"usa-form-group"}"
      data-testid="mock-GridContainer"
    >
      <div
        data-mock-props="{"row":true,"gap":2}"
        data-testid="mock-Grid"
        gap={2}
        row={true}
      >
        <div
          col={12}
          data-mock-props="{"col":12}"
          data-testid="mock-Grid"
        >
          <div
            data-mock-props="{"error":true}"
            data-testid="mock-FormGroup"
            error={true}
          >
            <div
              data-mock-props="{"htmlFor":"root_name","error":true}"
              data-testid="mock-Label"
              error={true}
              htmlFor="root_name"
            >
              name
            </div>
            <div
              className="usa-hint"
            />
            <div
              data-mock-props="{"error":true}"
              data-testid="mock-FormGroup"
              error={true}
            >
              <div
                data-mock-props="{"htmlFor":"root_name","error":true}"
                data-testid="mock-Label"
                error={true}
                htmlFor="root_name"
              >
                name
              </div>
              <div
                aria-describedby="root_name__error root_name__description root_name__help"
                className="usa-input--error"
                data-mock-props="{"id":"root_name","name":"root_name","className":"usa-input--error","type":"text","value":"","aria-describedby":"root_name__error root_name__description root_name__help"}"
                data-testid="mock-TextInput"
                id="root_name"
                name="root_name"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                value=""
              />
            </div>
            <div>
              <ul
                className="error-detail bs-callout bs-callout-info"
                id="root_name__error"
              >
                <li
                  className="text-danger"
                >
                  Bad input
                </li>
              </ul>
            </div>
            <div
              className="usa-hint"
            />
          </div>
        </div>
      </div>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`array fields no errors 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      className="usa-hint"
    />
    <div
      className="usa-form-group"
      data-mock-props="{"className":"usa-form-group"}"
      data-testid="mock-GridContainer"
    >
      <div
        data-mock-props="{"row":true,"gap":2}"
        data-testid="mock-Grid"
        gap={2}
        row={true}
      >
        <div
          col={12}
          data-mock-props="{"col":12}"
          data-testid="mock-Grid"
        >
          <div
            data-mock-props="{"error":false}"
            data-testid="mock-FormGroup"
            error={false}
          >
            <div
              data-mock-props="{"htmlFor":"root_name","error":false}"
              data-testid="mock-Label"
              error={false}
              htmlFor="root_name"
            >
              name
            </div>
            <div
              className="usa-hint"
            />
            <div
              data-mock-props="{"error":false}"
              data-testid="mock-FormGroup"
              error={false}
            >
              <div
                data-mock-props="{"htmlFor":"root_name","error":false}"
                data-testid="mock-Label"
                error={false}
                htmlFor="root_name"
              >
                name
              </div>
              <div
                aria-describedby="root_name__error root_name__description root_name__help"
                className=""
                data-mock-props="{"id":"root_name","name":"root_name","className":"","type":"text","value":"","aria-describedby":"root_name__error root_name__description root_name__help"}"
                data-testid="mock-TextInput"
                id="root_name"
                name="root_name"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                value=""
              />
            </div>
            <div
              className="usa-hint"
            />
          </div>
        </div>
      </div>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      Test field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a test description
      </p>
    </div>
    <div
      className="field field-array field-array-of-string"
      data-mock-props="{"className":"field field-array field-array-of-string"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description array icons 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      Test field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a test description
      </p>
    </div>
    <div
      className="field field-array field-array-of-string"
      data-mock-props="{"className":"field field-array field-array-of-string"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description checkboxes 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      Test field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a test description
      </p>
    </div>
    <div
      data-mock-props="{"id":"root","name":"root","value":[],"required":false,"disabled":false,"multiple":true}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      multiple={true}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      value={[]}
    >
      <option
        value="a"
      >
        a
      </option>
      <option
        value="b"
      >
        b
      </option>
      <option
        value="c"
      >
        c
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description fixed array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      Test field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a test description
      </p>
    </div>
    <div
      className="field field-array field-array-fixed-items"
      data-mock-props="{"className":"field field-array field-array-fixed-items"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description from both array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      My Field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a fancier description
      </p>
    </div>
    <div
      className="field field-array field-array-of-string"
      data-mock-props="{"className":"field field-array field-array-of-string"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description from both array icons 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      My Field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a fancier description
      </p>
    </div>
    <div
      className="field field-array field-array-of-string"
      data-mock-props="{"className":"field field-array field-array-of-string"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description from both checkboxes 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      My Field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a fancier description
      </p>
    </div>
    <div
      data-mock-props="{"id":"root","name":"root","value":[],"required":false,"disabled":false,"multiple":true}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      multiple={true}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      value={[]}
    >
      <option
        value="a"
      >
        a
      </option>
      <option
        value="b"
      >
        b
      </option>
      <option
        value="c"
      >
        c
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description from both fixed array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      My Field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a fancier description
      </p>
    </div>
    <div
      className="field field-array field-array-fixed-items"
      data-mock-props="{"className":"field field-array field-array-fixed-items"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description from uiSchema array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      My Field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a fancier description
      </p>
    </div>
    <div
      className="field field-array field-array-of-string"
      data-mock-props="{"className":"field field-array field-array-of-string"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description from uiSchema array icons 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      My Field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a fancier description
      </p>
    </div>
    <div
      className="field field-array field-array-of-string"
      data-mock-props="{"className":"field field-array field-array-of-string"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description from uiSchema checkboxes 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      My Field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a fancier description
      </p>
    </div>
    <div
      data-mock-props="{"id":"root","name":"root","value":[],"required":false,"disabled":false,"multiple":true}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      multiple={true}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      value={[]}
    >
      <option
        value="a"
      >
        a
      </option>
      <option
        value="b"
      >
        b
      </option>
      <option
        value="c"
      >
        c
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description from uiSchema fixed array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      My Field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a fancier description
      </p>
    </div>
    <div
      className="field field-array field-array-fixed-items"
      data-mock-props="{"className":"field field-array field-array-fixed-items"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description with global label off array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      Test field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a test description
      </p>
    </div>
    <div
      className="field field-array field-array-of-string"
      data-mock-props="{"className":"field field-array field-array-of-string"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description with global label off array icons 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      Test field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a test description
      </p>
    </div>
    <div
      className="field field-array field-array-of-string"
      data-mock-props="{"className":"field field-array field-array-of-string"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description with global label off checkboxes 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      Test field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a test description
      </p>
    </div>
    <div
      data-mock-props="{"id":"root","name":"root","value":[],"required":false,"disabled":false,"multiple":true}"
      data-testid="mock-Select"
      disabled={false}
      id="root"
      multiple={true}
      name="root"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      value={[]}
    >
      <option
        value="a"
      >
        a
      </option>
      <option
        value="b"
      >
        b
      </option>
      <option
        value="c"
      >
        c
      </option>
    </div>
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;

exports[`with title and description with global label off fixed array 1`] = `
<form
  className="rjsf"
  noValidate={false}
  onSubmit={[Function]}
>
  <div
    data-mock-props="{"error":false}"
    data-testid="mock-FormGroup"
    error={false}
  >
    <div
      data-mock-props="{"htmlFor":"root","error":false}"
      data-testid="mock-Label"
      error={false}
      htmlFor="root"
    >
      Test field
    </div>
    <div
      className="usa-hint"
    >
      <p
        className="field-description"
        id="root__description"
      >
        a test description
      </p>
    </div>
    <div
      className="field field-array field-array-fixed-items"
      data-mock-props="{"className":"field field-array field-array-fixed-items"}"
      data-testid="mock-Grid"
    />
    <div
      className="usa-hint"
    />
  </div>
  <div>
    <button
      className="btn btn-info "
      disabled={false}
      type="submit"
    >
      Submit
    </button>
  </div>
</form>
`;
